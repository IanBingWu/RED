--- RCPTT testcase ---
Format-Version: 1.0
Contexts: __WLXAILcEemG5cruxlOj_w
Element-Name: FormatterWithTidy
Element-Type: testcase
Element-Version: 3.0
External-Reference: 
Id: _dnU9IILkEemG5cruxlOj_w
Runtime-Version: 2.5.0.202001211718
Save-Time: 4/20/20 5:25 PM
Testcase-Type: ecl

------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac
Content-Type: text/ecl
Entry-Name: .content

get-preferences-menu | click
get-window Preferences | get-tree | select "Robot Framework/Editor/Code Formatter"

//chech preference window
with [get-window Preferences] {
    get-label "Choose formatter" | get-property caption | equals "Choose formatter" | verify-true
    with [get-control Any -after [get-label "Choose formatter"]] {
        get-property "getChildren().length" | equals 2 | verify-true
        get-property "getChildren().Control[0].getText()" | equals "Robot Tidy formatter" | verify-true
        get-property "getChildren().Control[1].getText()" | equals "RED formatter" | verify-true
    }
    get-button "Adjust separator lengths" | get-property selected | equals false | verify-true
    with [get-button "Right trim lines"] {
        get-property caption | equals "Right trim lines" | verify-true
        get-property selected | equals false | verify-true
    }
    with [get-combo -after [get-label "Separator type"]] {
        get-property enablement | equals false | verify-true
        get-property selection | equals "use constant number of spaces" | verify-true
        get-property "values[0]" | equals "use constant number of spaces" | verify-true
        get-property "values[1]" | equals "pad spaces in columns dynamically" | verify-true
    }
    with [get-editbox -after [get-label "Separator length"]] {
        get-property enablement | equals false | verify-true
        get-property text | equals 4 | verify-true
    }
    get-label "Separator length" | get-property caption | equals "Separator length" | verify-true
    with [get-button "Ignore cells longer than limit when adjusting dynamically"] {
        get-property enablement | equals false | verify-true
        get-property caption | equals "Ignore cells longer than limit when adjusting dynamically" | verify-true
        get-property selected | equals true | verify-true
    }
    get-label "Cell length limit" | get-property caption | equals "Cell length limit" | verify-true
    get-editbox -after [get-label "Cell length limit"] | get-property text | equals 40 | verify-true
}

//selecttidy formatter
get-window Preferences | get-button "Robot Tidy formatter" | click
get-window Preferences | maximize

//check warning
get-window Preferences | get-editbox -index 1 | get-property text 
    | equals "Robot Tidy formatter is able to format whole source only" | verify-true
get-window Preferences | get-button "Apply and Close" | click

//open editor and reformat
get-view "Project Explorer" | get-tree | select "Formatter/test.robot" | double-click
with [get-editor "test.robot" | get-text-viewer] {
    set-caret-pos 21 31
    key-type "M1+M2+f"
}

//check that text was changed
get-button "Show Whitespace Characters" | click
get-editor "test.robot" | get-text-viewer | get-property text | equals "*** Settings ***\n"
    + "Library           OperatingSystem\n"
    + "Library           Collections\n\n"
    + "*** Test Cases ***\n"
    + "test\n"
    + "    log    6\n"
    + "    #new loop\n"
    + "    FOR    ${index}    IN RANGE    10\n"
    + "        ${resp}=    Should Be Equal    first    second\n"
    + "        Should Be Equal As Integers    ${resp.status_code}    200\n"
    + "    END\n"
    + "    #old loop\n"
    + "    FOR    ${index}    IN RANGE    10\n"
    + "        ${resp}=    Should Be Equal    first    second\n"
    + "        Should Be Equal As Integers    ${resp.status_code}    200\n"
    + "    END\n\n"
    + "Example\n"
    + "    Keyword    argument\n"
    + "    ...    # comment\n"
    + "    ...    another argument\n\n"
    + "test 2\n"
    + "    SEPLcontrol.LIPLcontrol.thisSetupSomething    ${SDV_MPlane_IP}    ${SDV_SEM_path}    ${SCFundertest}\n"
    + "    log    7\n"
    + "    FOR    ${counter}    IN RANGE    0    ${NloopHO}\n"
    + "        Set Test Variable    ${counter}\n"
    + "        Log    \"entering loop\"\n"
    + "        ${celka}=    Evaluate    ${counter}%${c}\n"
    + "    END\n"
    + "    Run Keyword If    '${os}'!='Linux'    Convert To Hex    ${x}\n"
    + "    ...    ${SDV_LOCAL_LIB_PATH}" | verify-true
    
//add new long line and reformat    
with [get-editor "test.robot" | get-text-viewer] {
    set-caret-pos 33 33
    key-type "NUMPAD_ENTER" "\\u000D"
    key-type Backspace -times 7
    type-text "This is very long kw with many characters and some chars like # ()-  ${z}"
    key-type "M1+s"
    key-type "M1+M2+f"
}

//one more reformat
get-editor "test.robot" | get-text-viewer | get-property text | equals "*** Settings ***\n"
    + "Library           OperatingSystem\n"
    + "Library           Collections\n\n"
    + "*** Test Cases ***\n"
    + "test\n"
    + "    log    6\n"
    + "    #new loop\n"
    + "    FOR    ${index}    IN RANGE    10\n"
    + "        ${resp}=    Should Be Equal    first    second\n"
    + "        Should Be Equal As Integers    ${resp.status_code}    200\n"
    + "    END\n"
    + "    #old loop\n"
    + "    FOR    ${index}    IN RANGE    10\n"
    + "        ${resp}=    Should Be Equal    first    second\n"
    + "        Should Be Equal As Integers    ${resp.status_code}    200\n"
    + "    END\n\n"
    + "Example\n"
    + "    Keyword    argument\n"
    + "    ...    # comment\n"
    + "    ...    another argument\n\n"
    + "test 2\n"
    + "    SEPLcontrol.LIPLcontrol.thisSetupSomething    ${SDV_MPlane_IP}    ${SDV_SEM_path}    ${SCFundertest}\n"
    + "    log    7\n"
    + "    FOR    ${counter}    IN RANGE    0    ${NloopHO}\n"
    + "        Set Test Variable    ${counter}\n"
    + "        Log    \"entering loop\"\n"
    + "        ${celka}=    Evaluate    ${counter}%${c}\n"
    + "    END\n"
    + "    Run Keyword If    '${os}'!='Linux'    Convert To Hex    ${x}\n"
    + "    ...    ${SDV_LOCAL_LIB_PATH}\n"
    + "    This is very long kw with many characters and some chars like # ()-    ${z}" | verify-true
    

//reset
get-editor "test.robot" | get-text-viewer | set-text "*** Settings ***\n"
    + "Library\tOperatingSystem\n"
    + "Library   Collections\n\n"
    + "*** Test Cases ***\n"
    + "test\n"
    + "    log   6\n"
    + "    #new loop\n"
    + "    FOR    ${index}    IN RANGE    10\n"
    + "            ${resp}=    Should Be Equal    first    second    \n"
    + "        Should Be Equal As Integers    ${resp.status_code}      200\n"
    + "    END\n"
    + "    \n"
    + "    #old loop \n"
    + "    : FOR    ${index}    IN RANGE    10\n"
    + "    \\    ${resp}=   Should Be Equal    first    second    \n"
    + "    \\     Should Be Equal As Integers       ${resp.status_code}    200\n\n"
    + "Example\n"
    + "    Keyword    argument\n"
    + "    ...    # comment            \n"
    + "    ...    another argument\n"
    + "test 2\n"
    + "    \n"
    + "    SEPLcontrol.LIPLcontrol.thisSetupSomething   ${SDV_MPlane_IP}     ${SDV_SEM_path}    ${SCFundertest}\n"
    + "    log  7\n"
    + "    : FOR    ${counter}           IN RANGE           0                 ${NloopHO}\n"
    + "    \\        Set Test Variable    ${counter}\n"
    + "    \\        Log                  \"entering loop\"\n"
    + "    \\        ${celka}=            Evaluate           ${counter}%${c}\n"
    + "    Run Keyword If    '${os}'!='Linux'    Convert To Hex  ${x}\n"
    + "    ...    ${SDV_LOCAL_LIB_PATH}" 
    
//set to adjust 4 spaces    
get-preferences-menu | click
with [get-window Preferences] {
    get-button "RED formatter" | click
    get-button "Adjust separator lengths" | check
    get-button "Apply and Close" | click
}
with [get-editor "test.robot" | get-text-viewer] {
    set-caret-pos 8 14
    key-type "M1+M2+f"
}

get-editor "test.robot" | get-text-viewer | get-property text | equals "*** Settings ***\n"
    + "Library    OperatingSystem\n"
    + "Library    Collections\n\n"
    + "*** Test Cases ***\n"
    + "test\n"
    + "    log    6\n"
    + "    #new loop\n"
    + "    FOR    ${index}    IN RANGE    10\n"
    + "        ${resp}=    Should Be Equal    first    second    \n"
    + "        Should Be Equal As Integers    ${resp.status_code}    200\n"
    + "    END\n"
    + "    \n"
    + "    #old loop \n"
    + "    : FOR    ${index}    IN RANGE    10\n"
    + "    \\    ${resp}=    Should Be Equal    first    second    \n"
    + "    \\    Should Be Equal As Integers    ${resp.status_code}    200\n\n"
    + "Example\n"
    + "    Keyword    argument\n"
    + "    ...    # comment    \n"
    + "    ...    another argument\n"
    + "test 2\n"
    + "    \n"
    + "    SEPLcontrol.LIPLcontrol.thisSetupSomething    ${SDV_MPlane_IP}    ${SDV_SEM_path}    ${SCFundertest}\n"
    + "    log    7\n"
    + "    : FOR    ${counter}    IN RANGE    0    ${NloopHO}\n"
    + "    \\    Set Test Variable    ${counter}\n"
    + "    \\    Log    \"entering loop\"\n"
    + "    \\    ${celka}=    Evaluate    ${counter}%${c}\n"
    + "    Run Keyword If    '${os}'!='Linux'    Convert To Hex    ${x}\n"
    + "    ...    ${SDV_LOCAL_LIB_PATH}" | verify-true

// set bigger gap
get-preferences-menu | click
with [get-window Preferences] {
    get-editbox -after [get-label "Separator length"] | set-text 6
    get-button "Apply and Close" | click
}
with [get-editor "test.robot" | get-text-viewer] {
    set-caret-pos 24 5
    key-type "M1+M2+f"
}

get-editor "test.robot" | get-text-viewer | get-property text | equals "*** Settings ***\n"
    + "Library      OperatingSystem\n"
    + "Library      Collections\n\n"
    + "*** Test Cases ***\n"
    + "test\n"
    + "      log      6\n"
    + "      #new loop\n"
    + "      FOR      ${index}      IN RANGE      10\n"
    + "            ${resp}=      Should Be Equal      first      second      \n"
    + "            Should Be Equal As Integers      ${resp.status_code}      200\n"
    + "      END\n"
    + "      \n"
    + "      #old loop \n"
    + "      : FOR      ${index}      IN RANGE      10\n"
    + "      \\      ${resp}=      Should Be Equal      first      second      \n"
    + "      \\      Should Be Equal As Integers      ${resp.status_code}      200\n\n"
    + "Example\n"
    + "      Keyword      argument\n"
    + "      ...      # comment      \n"
    + "      ...      another argument\n"
    + "test 2\n"
    + "      \n"
    + "      SEPLcontrol.LIPLcontrol.thisSetupSomething      ${SDV_MPlane_IP}      ${SDV_SEM_path}      ${SCFundertest}\n"
    + "      log      7\n"
    + "      : FOR      ${counter}      IN RANGE      0      ${NloopHO}\n"
    + "      \\      Set Test Variable      ${counter}\n"
    + "      \\      Log      \"entering loop\"\n"
    + "      \\      ${celka}=      Evaluate      ${counter}%${c}\n"
    + "      Run Keyword If      '${os}'!='Linux'      Convert To Hex      ${x}\n"
    + "      ...      ${SDV_LOCAL_LIB_PATH}" | verify-true
    
//set ignoring to bigger then text    
get-preferences-menu | click
with [get-window Preferences] {
    get-combo -after [get-label "Separator type"] | select "pad spaces in columns dynamically"
    get-editbox -after [get-label "Cell length limit"] | set-text 80
    get-button "Apply and Close" | click
}
with [get-editor "test.robot" | get-text-viewer] {
    set-caret-pos 14 17
    key-type "M1+M2+f"
}
get-editor "test.robot" | get-text-viewer | get-property text | equals "*** Settings ***\n"
    + "Library                 OperatingSystem\n"
    + "Library                 Collections\n\n"
    + "*** Test Cases ***\n"
    + "test\n"
    + "      log                                             6\n"
    + "      #new loop\n"
    + "      FOR                                             ${index}                         IN RANGE                 10\n"
    + "            ${resp}=                                        Should Be Equal                  first                    second               \n"
    + "            Should Be Equal As Integers                     ${resp.status_code}              200\n"
    + "      END\n"
    + "      \n"
    + "      #old loop \n"
    + "      : FOR                                           ${index}                         IN RANGE                 10\n"
    + "      \\                                               ${resp}=                         Should Be Equal          first                second          \n"
    + "      \\                                               Should Be Equal As Integers      ${resp.status_code}      200\n\n"
    + "Example\n"
    + "      Keyword                                         argument\n"
    + "      ...                                             # comment                        \n"
    + "      ...                                             another argument\n"
    + "test 2\n"
    + "      \n"
    + "      SEPLcontrol.LIPLcontrol.thisSetupSomething      ${SDV_MPlane_IP}                 ${SDV_SEM_path}          ${SCFundertest}\n"
    + "      log                                             7\n"
    + "      : FOR                                           ${counter}                       IN RANGE                 0                    ${NloopHO}\n"
    + "      \\                                               Set Test Variable                ${counter}\n"
    + "      \\                                               Log                              \"entering loop\"\n"
    + "      \\                                               ${celka}=                        Evaluate                 ${counter}%${c}\n"
    + "      Run Keyword If                                  '${os}'!='Linux'                 Convert To Hex           ${x}\n"
    + "      ...                                             ${SDV_LOCAL_LIB_PATH}" | verify-true

//set ignoring lenght limit to 20
get-preferences-menu | click
with [get-window Preferences] {
    get-editbox -after [get-label "Cell length limit"] | set-text 20
    get-button "Apply and Close" | click
}
with [get-editor "test.robot" | get-text-viewer] {
    set-caret-pos 24 7
    key-type "M1+M2+f"
}
get-editor "test.robot" | get-text-viewer | get-property text | equals "*** Settings ***\n"
    + "Library                 OperatingSystem\n"
    + "Library                 Collections\n\n"
    + "*** Test Cases ***\n"
    + "test\n"
    + "      log                  6\n"
    + "      #new loop\n"
    + "      FOR                  ${index}                 IN RANGE                 10\n"
    + "            ${resp}=             Should Be Equal          first                    second               \n"
    + "            Should Be Equal As Integers      ${resp.status_code}      200\n"
    + "      END\n"
    + "      \n"
    + "      #old loop \n"
    + "      : FOR                ${index}                 IN RANGE                 10\n"
    + "      \\                    ${resp}=                 Should Be Equal          first                second          \n"
    + "      \\                    Should Be Equal As Integers      ${resp.status_code}      200\n\n"
    + "Example\n"
    + "      Keyword              argument\n"
    + "      ...                  # comment                \n"
    + "      ...                  another argument\n"
    + "test 2\n"
    + "      \n"
    + "      SEPLcontrol.LIPLcontrol.thisSetupSomething      ${SDV_MPlane_IP}         ${SDV_SEM_path}          ${SCFundertest}\n"
    + "      log                  7\n"
    + "      : FOR                ${counter}               IN RANGE                 0                    ${NloopHO}\n"
    + "      \\                    Set Test Variable        ${counter}\n"
    + "      \\                    Log                      \"entering loop\"\n"
    + "      \\                    ${celka}=                Evaluate                 ${counter}%${c}\n"
    + "      Run Keyword If       '${os}'!='Linux'         Convert To Hex           ${x}\n"
    + "      ...                  ${SDV_LOCAL_LIB_PATH}" | verify-true
    
//unselect ignoring    
get-preferences-menu | click
with [get-window Preferences] {
    get-button "Ignore cells longer than limit when adjusting dynamically" | uncheck
    get-button "Apply and Close" | click
}
with [get-editor "test.robot" | get-text-viewer] {
    set-caret-pos 23 7
    key-type "M1+M2+f"
}
get-editor "test.robot" | get-text-viewer | get-property text | equals "*** Settings ***\n"
    + "Library                 OperatingSystem\n"
    + "Library                 Collections\n\n"
    + "*** Test Cases ***\n"
    + "test\n"
    + "      log                                             6\n"
    + "      #new loop\n"
    + "      FOR                                             ${index}                         IN RANGE                 10\n"
    + "            ${resp}=                                        Should Be Equal                  first                    second               \n"
    + "            Should Be Equal As Integers                     ${resp.status_code}              200\n"
    + "      END\n"
    + "      \n"
    + "      #old loop \n"
    + "      : FOR                                           ${index}                         IN RANGE                 10\n"
    + "      \\                                               ${resp}=                         Should Be Equal          first                second          \n"
    + "      \\                                               Should Be Equal As Integers      ${resp.status_code}      200\n\n"
    + "Example\n"
    + "      Keyword                                         argument\n"
    + "      ...                                             # comment                        \n"
    + "      ...                                             another argument\n"
    + "test 2\n"
    + "      \n"
    + "      SEPLcontrol.LIPLcontrol.thisSetupSomething      ${SDV_MPlane_IP}                 ${SDV_SEM_path}          ${SCFundertest}\n"
    + "      log                                             7\n"
    + "      : FOR                                           ${counter}                       IN RANGE                 0                    ${NloopHO}\n"
    + "      \\                                               Set Test Variable                ${counter}\n"
    + "      \\                                               Log                              \"entering loop\"\n"
    + "      \\                                               ${celka}=                        Evaluate                 ${counter}%${c}\n"
    + "      Run Keyword If                                  '${os}'!='Linux'                 Convert To Hex           ${x}\n"
    + "      ...                                             ${SDV_LOCAL_LIB_PATH}" | verify-true
    
    
// set 4 spaces    
get-preferences-menu | click
with [get-window Preferences] {
    get-editbox -after [get-label "Separator length"] | set-text 4
    get-combo -after [get-label "Separator type"] | select "use constant number of spaces"
    get-button "Apply and Close" | click
}

///select part of text
with [get-editor "test.robot" | get-text-viewer] {
    set-caret-pos 31 114
    select-range 31 117 26 1
    key-type "M1+M2+f"
}
get-editor "test.robot" | get-text-viewer | get-property text | equals "*** Settings ***\n"
    + "Library                 OperatingSystem\n"
    + "Library                 Collections\n\n"
    + "*** Test Cases ***\n"
    + "test\n"
    + "      log                                             6\n"
    + "      #new loop\n"
    + "      FOR                                             ${index}                         IN RANGE                 10\n"
    + "            ${resp}=                                        Should Be Equal                  first                    second               \n"
    + "            Should Be Equal As Integers                     ${resp.status_code}              200\n"
    + "      END\n"
    + "      \n"
    + "      #old loop \n"
    + "      : FOR                                           ${index}                         IN RANGE                 10\n"
    + "      \\                                               ${resp}=                         Should Be Equal          first                second          \n"
    + "      \\                                               Should Be Equal As Integers      ${resp.status_code}      200\n\n"
    + "Example\n"
    + "      Keyword                                         argument\n"
    + "      ...                                             # comment                        \n"
    + "      ...                                             another argument\n"
    + "test 2\n"
    + "      \n"
    + "      SEPLcontrol.LIPLcontrol.thisSetupSomething      ${SDV_MPlane_IP}                 ${SDV_SEM_path}          ${SCFundertest}\n"
    + "    log    7\n"
    + "    : FOR    ${counter}    IN RANGE    0    ${NloopHO}\n"
    + "    \\    Set Test Variable    ${counter}\n"
    + "    \\    Log    \"entering loop\"\n"
    + "    \\    ${celka}=    Evaluate    ${counter}%${c}\n"
    + "    Run Keyword If    '${os}'!='Linux'    Convert To Hex    ${x}\n"
    + "      ...                                             ${SDV_LOCAL_LIB_PATH}" | verify-true
        
------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac--
