--- RCPTT testcase ---
Format-Version: 1.0
Contexts: _d8aMACuvEeW667Afdo4DcA,_FsQFUFFmEemaBdiDDGirUQ
Element-Name: WizardForPyDevDebugging
Element-Type: testcase
Element-Version: 3.0
External-Reference: 
Id: _g5qHQFFlEemaBdiDDGirUQ
Runtime-Version: 2.4.3.201909171500
Save-Time: 2/5/20 3:44 PM
Testcase-Type: ecl

------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac
Content-Type: text/ecl
Entry-Name: .content

// set focus on test - here will be run config
get-view "Project Explorer" | get-tree | select "Wizard/TestFile.robot"

//open wizard
get-menu -path "File/New/Other..." | click
with [get-window New] {
    get-tree | select "Robot Framework/RED with PyDev debugging session"
    get-button "Next >" | click
}

//select python
with [get-window "RED with PyDev debugging session"] {
    get-table | select [format "Robot Framework .* \\(Python %s.*\\)" $python_version]
    get-button "Next >" | click
}

//check first window
with [get-window "RED with PyDev debugging session" | get-control Any -index 7] {
    get-property "getChildren().length" | equals 3 | verify-true
    get-property "getChildren().Control[0].getText()" | equals "Chosen Python installation:" | verify-true
//    get-property "getChildren().Control[1].getText()" | equals $python_exe_path| verify-true
    
    //first for pip install
    get-property "getChildren().Control[2].getText()" | equals "Runner module" | verify-true
    get-property "getChildren().Control[2].getChildren().Control[0].getSelection()" | equals true | verify-true
    get-property "getChildren().Control[2].getChildren().Control[0].getText()" 
        | equals "Use redpydevd installed in chosen Python (recommended)" | verify-true
        
    //export    
    get-property "getChildren().Control[2].getChildren().Control[1].getSelection()" | equals false | verify-true
    get-property "getChildren().Control[2].getChildren().Control[1].getText()" 
        | equals "Export redpydevd to external location defined below" | verify-true

    // use existing    
    get-property "getChildren().Control[2].getChildren().Control[2].getSelection()" | equals false | verify-true
    get-property "getChildren().Control[2].getChildren().Control[2].getText()" 
        | equals "Use redpydevd from external location defined below" | verify-true
    //path    
    get-property "getChildren().Control[2].getChildren().Control[3].getText()" | equals "" | verify-true
    get-property "getChildren().Control[2].getChildren().Control[4].getText()" | equals "Choose location" | verify-true
    get-property "getChildren().Control[2].getChildren().Control[4].isEnabled()" | equals true | verify-true
    
    // info
    get-property "getChildren().Control[2].getChildren().Control[5].getText()" 
        | equals "This version of RED requires and supports redpydevd runner module in version 1.0.0" | verify-true
}

// use to export - use project path
get-window "RED with PyDev debugging session" | get-group "Runner module" 
    | get-button "Export redpydevd to external location defined below" | click
        
set-dialog-result Folder "platform:/resource/Wizard"

// got to pydev file
with [get-window "RED with PyDev debugging session"] {
    get-group "Runner module" | get-button "Choose location" | click
    get-button "Next >" | click
}

with [get-window "RED with PyDev debugging session" | get-control Any -index 7] {
    get-property "getChildren().length" | equals 4 | verify-true
    get-property "getChildren().Control[0].getText()" | equals "Chosen Python installation:" | verify-true
    get-property "getChildren().Control[1].getText()" | equals $python_exe_path| verify-true
    
    // module
    get-property "getChildren().Control[2].getText()" | equals "Debugger module" | verify-true
    get-property "getChildren().Control[2].getChildren().length" | equals 7 | verify-true
    
    // pydev from Pydev
    get-property "getChildren().Control[2].getChildren().Control[0].getSelection()" | equals false | verify-true
    get-property "getChildren().Control[2].getChildren().Control[0].getText()" 
        | equals "Use pydevd distributed with PyDev (recommended)" | verify-true
    get-property "getChildren().Control[2].getChildren().Control[0].isEnabled()" | equals false | verify-true
    
    // pydev version
    get-property "getChildren().Control[2].getChildren().Control[1].getChildren().length" | equals 2 | verify-true
    get-property "getChildren().Control[2].getChildren().Control[1].getChildren().Control[0].getText()" 
        | equals "pydevd version:" | verify-true
    get-property "getChildren().Control[2].getChildren().Control[1].getChildren().Control[1].getText()" 
        | equals "<unknown>" | verify-true
        
    // pydev installed i Python    
    get-property "getChildren().Control[2].getChildren().Control[2].getText()" 
        | equals "Use pydevd installed in chosen Python" | verify-true
    get-property "getChildren().Control[2].getChildren().Control[3].getChildren().length" | equals 2 | verify-true
    get-property "getChildren().Control[2].getChildren().Control[3].getChildren().Control[0].getText()" 
        | equals "pydevd version:" | verify-true
    get-property "getChildren().Control[2].getChildren().Control[3].getChildren().Control[1].getText()" 
        | equals "<unknown>" | verify-true
        
    // pydev from path    
    get-property "getChildren().Control[2].getChildren().Control[4].getSelection()" | equals true | verify-true
    get-property "getChildren().Control[2].getChildren().Control[4].getText()" 
        | equals "Use pydevd from external location defined below" | verify-true
    get-property "getChildren().Control[2].getChildren().Control[5].getChildren().length" | equals 2 | verify-true
    get-property "getChildren().Control[2].getChildren().Control[5].getChildren().Control[0].getText()" | equals "" 
        | verify-true
        
    // 3 buttons    
    get-property "getChildren().Control[2].getChildren().Control[5].getChildren().Control[1].getChildren().length" 
        | equals 3 | verify-true
    get-property "getChildren().Control[2].getChildren().Control[5].getChildren().Control[1].getChildren().Control[0].getText()" 
        | equals "Workspace..." | verify-true
    get-property "getChildren().Control[2].getChildren().Control[5].getChildren().Control[1].getChildren().Control[1].getText()" 
        | equals "File system..." | verify-true
    get-property "getChildren().Control[2].getChildren().Control[5].getChildren().Control[1].getChildren().Control[2].getText()" 
        | equals "Variables..." | verify-true
        
    //gevent
    get-property "getChildren().Control[2].getChildren().Control[6].getSelection()" | equals false | verify-true
    get-property "getChildren().Control[2].getChildren().Control[6].getText()" | equals "Gevent compatible" | verify-true    
        
    // debuger settings    
    get-property "getChildren().Control[3].getText()" | equals "Debugger module settings" | verify-true
    get-property "getChildren().Control[3].getChildren().length" | equals 5 | verify-true
    
    //client
    get-property "getChildren().Control[3].getChildren().Control[0].getText()" | equals Client | verify-true
    get-property "getChildren().Control[3].getChildren().Control[1].getText()" | equals "127.0.0.1" | verify-true
    get-property "getChildren().Control[3].getChildren().Control[1].getEditable()" | equals true | verify-true
    
    //port
    get-property "getChildren().Control[3].getChildren().Control[2].getText()" | equals Port | verify-true
    get-property "getChildren().Control[3].getChildren().Control[3].getText()" | equals 5678 | verify-true
    get-property "getChildren().Control[3].getChildren().Control[3].getEditable()" | equals true | verify-true
    
    //info
    get-property "getChildren().Control[3].getChildren().Control[4].getText()" 
        | equals "Remember to start PyDev Debug Server prior to launching session" | verify-true
}

//use existing one form project
with [get-window "RED with PyDev debugging session"] {
    get-group "Debugger module" | get-button "Workspace..." | click
    with [get-window "Select file:"] {
        get-tree | select "Wizard/pydevd.py"
        get-button OK | click
    }
    get-button Finish | click
}

// debug window is now shown
with [get-window "Debug Configurations" | get-tab-folder] {
    get-tab-item Environment | click
    get-tab-item Executor | click
}
with [get-window "Debug Configurations" | get-group "External script"] {
    get-editbox -after [get-label "Executable file to run Robot Framework tests:"] | get-property text 
        | equals [concat $python_exe_path $sys_sep  [os-specific "python.exe" "python3" ]]| verify-true
    get-editbox 
        -after [get-label "Additional executable file arguments. Python interpreter's and Robot parameters will be added afterwards."] 
        | get-property text 
        | equals [format "%s%sWizard%sredpydevd.py --pydevd %s%SWizard%spydevd.py" $RED_workspace_path  $sys_sep $sys_sep $RED_workspace_path $sys_sep $sys_sep]
        | verify-true
}

get-window "Debug Configurations" | get-tab-folder | get-tab-item Robot | click
with [get-window "Debug Configurations"] {
    get-group "Suite(s)" | get-tree | get-item -path "TestFile.robot" | get-property caption | equals "TestFile.robot" 
        | verify-true
    get-group Project | get-editbox | get-property text | equals Wizard | verify-true
}

get-window "Debug Configurations" | get-button Close | click

//check that redfile was exported
get-view "Project Explorer" | get-tree | select Wizard | get-menu -path Refresh | click
get-view "Project Explorer" | get-tree | get-item -path "Wizard/redpydevd.py" | get-property selection | equals false 
    | verify-true


// -------------------------------------------- select jython, Ip, port --------------------
//click of project name
get-view "Project Explorer" | get-tree | select Wizard


//open wizard
get-view "Project Explorer" | get-tree | key-type "M1+n"
with [get-window New] {
    get-editbox -after [get-label "Wizards:"] | set-text "type filter text"
    get-tree | select "Robot Framework/RED with PyDev debugging session" | double-click
}

//use external location
with [get-window "RED with PyDev debugging session"] {
    get-table | select "Robot Framework .* \\(Python .*\\)"
    get-button "Next >" | click
    get-group "Runner module" | get-button "Use redpydevd from external location defined below" | click
}

//select external red file 
set-dialog-result Folder "platform:/resource/Wizard"
with [get-window "RED with PyDev debugging session"] {
    get-group "Runner module" | get-button "Choose location" | click
    get-button "Next >" | click
    
    // use pydev from workspace
    get-group "Debugger module" | get-button "Workspace..." | click
    with [get-window "Select file:"] {
        get-tree | select "Wizard/pydevd.py"
        get-button OK | click
    }
    //change ip and port
    with [get-group "Debugger module settings"] {
        get-editbox -after [get-label Client] | set-text "34.67.89"
        get-editbox -after [get-label Port] | set-text 123456
    }
}

//check error about port
get-window "RED with PyDev debugging session" | get-editbox 
    -after [get-label "Create launch configuration for RED and PyDev debugging session"] | get-property text 
    | equals "Port should be a an integer value between 1 and 65 535" | verify-true

//changed to good port
with [get-window "RED with PyDev debugging session" | get-group "Debugger module settings"] {
    get-editbox -after [get-label Port] | set-text 45678
    get-editbox -after [get-label Client] | click-text 9
}
get-window "RED with PyDev debugging session" | get-button Finish | click

// check settings
get-window "Debug Configurations" | get-tab-folder | get-tab-item Executor | click
with [get-window "Debug Configurations" | get-group "External script"] {
    get-editbox -after [get-label "Executable file to run Robot Framework tests:"] | get-property text 
        | equals [concat $python_exe_path $sys_sep [os-specific "python.exe"  "python"]] | verify-true
}

get-window "Debug Configurations" | get-group "External script" | get-editbox 
    -after [get-label "Additional executable file arguments. Python interpreter's and Robot parameters will be added afterwards."] 
    | get-property text 
    | equals [format "%s%sWizard%sredpydevd.py --pydevd %s%SWizard%spydevd.py --client 34.67.89 --port 45678" $RED_workspace_path  $sys_sep $sys_sep $RED_workspace_path $sys_sep $sys_sep]
    | verify-true

get-window "Debug Configurations" | get-tab-folder | get-tab-item Robot | click
get-window "Debug Configurations" | get-group "Suite(s)" | get-tree | get-property itemCount | equals 0 | verify-true
get-window "Debug Configurations" | get-button Close | click


//------------------------------------------ check gevent variable -----------------------

get-menu -path "File/New/Other..." | click
get-window New | get-tree | select "Robot Framework/RED with PyDev debugging session" | double-click
with [get-window "RED with PyDev debugging session"] {

    get-button "Next >" | click
    get-button "Next >" | click

    get-group "Debugger module" | get-button "Workspace..." | click
    with [get-window "Select file:"] {
        get-tree | select "Wizard/pydevd.py"
        get-button OK | click
    }
    
    //check option
    get-group "Debugger module" | get-button "Gevent compatible" | check
    get-button Finish | click
}

//check if in Run Config new variable is added
get-window "Debug Configurations" | get-tab-folder | get-tab-item Environment | click
with [get-window "Debug Configurations" | get-table] {
    get-item -path "GEVENT_SUPPORT" | get-property "values['Variable']" | equals "GEVENT_SUPPORT" | verify-true
    get-item -path "GEVENT_SUPPORT" | get-property "values['Value']" | equals True | verify-true
}

get-window "Debug Configurations" | get-button Close | click

------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac--
