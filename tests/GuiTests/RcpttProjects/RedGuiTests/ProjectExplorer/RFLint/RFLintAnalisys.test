--- RCPTT testcase ---
Format-Version: 1.0
Contexts: _Q0pU0LpZEee_RrklJFm4zA,_VzYJ0KEAEea9Cvae3yWo1A
Element-Name: RFLintAnalisys
Element-Type: testcase
Element-Version: 3.0
External-Reference: 
Id: _bwoQULpQEee_RrklJFm4zA
Runtime-Version: 2.5.0.202001211718
Save-Time: 4/20/20 2:06 PM
Testcase-Type: ecl

------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac
Content-Type: text/ecl
Entry-Name: .content

//
//
//  For this test install:
//  pip install --upgrade robotframework-lint
//

global [val link [format "Configure rules and their severity. Following rules are available for RfLint installed in "
    + "<a href=\"org.robotframework.ide.eclipse.main.plugin.preferences.installed\">%s</a> environment:" [replace -input $python_exe_path -old "\\" -new  "\\\\\\\\"]]]
    
proc "check-warnings-for-one-test"{
get-view Problems | get-tree | get-item -path "Errors \\(3 items\\)" | get-property childCount | equals 3 | verify-true
	with [get-view Problems | get-tree] {
	    get-item -path "Warnings \\(3 items\\)" | get-property "getItems().TreeItem[0].getText()" 
	        | equals "No suite documentation (RequireSuiteDocumentation)" | verify-true

	    get-item -path "Warnings \\(3 items\\)" | get-property "getItems().TreeItem[2].getText()" 
	        | equals "The keyword 'abc' is masking the keyword 'a b c' defined in res1. Use 'res1.a b c' in this suite file if the latter is desired" 
	        | verify-true
	        
	    get-item -path "Warnings \\(3 items\\)" | get-property "getItems().TreeItem[3].getText()" 
	        | equals "The keyword 'ABC' is masking the keyword 'a b c' defined in res1. Use 'res1.a b c' in this suite file if the latter is desired" 
	        | verify-true
	}
}
//run analisys on test
exec-with-options {
	get-view "Project Explorer" | get-tree | select "project_a/b1/b2/test2.robot" | get-menu 
	    -path "Robot Framework/Run RfLint analysis" | click
} -allowStatusDialog
    
//check if now are 3 warnings    
check-warnings-for-one-test

//run analisys on folder
get-view "Project Explorer" | get-tree | select "project_a/a1/a2" | get-menu 
    -path "Robot Framework/Run RfLint analysis" | click

get-view "Project Explorer" | get-tree | select "project_a/a1/a2/test1.robot" | double-click
get-editor "test1.robot" | get-tab-folder | get-tab-item "Test Cases" | click
set-list-with-markers-and-comapare -file "test1.robot" -table "Test Cases"  -ref_list [list 1 2] -type "ERROR"

get-editor "test1.robot" | get-tab-folder | get-tab-item "Keywords" | click
set-list-with-markers-and-comapare -file "test1.robot" -table "User Keywords"  -ref_list [list 1 7] -type "ERROR"
set-list-with-markers-and-comapare -file "test1.robot" -table "User Keywords"  -ref_list [list 4] -type "WARNING"
get-editor "test1.robot" | close

    
//check errors    
with [get-view Problems | get-tree] {
    get-item -path "Errors \\(6 items\\)" | get-property "getItems().TreeItem[0].getText()" 
        | equals "Duplicate keyword name 'ABC' (DuplicateKeywordNames)" | verify-true
    get-item -path "Errors \\(6 items\\)" | get-property "getItems().TreeItem[1].getText()" 
        | equals "Duplicated keyword definition 'abc'" | verify-true
    get-item -path "Errors \\(6 items\\)" | get-property "getItems().TreeItem[2].getText()" 
        | equals "Duplicated keyword definition 'ABC'" | verify-true
    get-item -path "Errors \\(6 items\\)" | get-property "getItems().TreeItem[3].getText()" 
        | equals "No keyword documentation (RequireKeywordDocumentation)" | verify-true
    get-item -path "Errors \\(6 items\\)" | get-property "getItems().TreeItem[4].getText()" 
        | equals "No testcase documentation (RequireTestDocumentation)" | verify-true
    get-item -path "Errors \\(6 items\\)" | get-property "getItems().TreeItem[5].getText()" 
        | equals "Test case 'test 1' contains no keywords to execute" | verify-true
}
with [get-view Problems | get-tree] {
    get-item -path "Warnings \\(8 items\\)" | get-property "getItems().TreeItem[0].getText()" 
        | equals "Line is too long (exceeds 100 characters) (LineTooLong)" | verify-true
        
    get-item -path "Warnings \\(8 items\\)" | get-property "getItems().TreeItem[1].getText()" 
        | equals "No suite documentation (RequireSuiteDocumentation)" | verify-true
        
    get-item -path "Warnings \\(8 items\\)" | get-property "getItems().TreeItem[2].getText()" 
        | equals "No suite documentation (RequireSuiteDocumentation)" | verify-true
        
    get-item -path "Warnings \\(8 items\\)" | get-property "getItems().TreeItem[3].getText()" 
        | equals "The keyword 'abc' is masking the keyword 'a b c' defined in res1. Use 'res1.a b c' in this suite file if the latter is desired" 
        | verify-true
    get-item -path "Warnings \\(8 items\\)" | get-property "getItems().TreeItem[4].getText()" 
        | equals "The keyword 'ABC' is masking the keyword 'a b c' defined in res1. Use 'res1.a b c' in this suite file if the latter is desired" 
        | verify-true
    get-item -path "Warnings \\(8 items\\)" | get-property "getItems().TreeItem[5].getText()" 
        | equals "Too few steps (0) in test case (TooFewTestSteps)" | verify-true
    get-item -path "Warnings \\(8 items\\)" | get-property "getItems().TreeItem[6].getText()" 
        | equals "Too few steps (1) in keyword (TooFewKeywordSteps)" | verify-true
    get-item -path "Warnings \\(8 items\\)" | get-property "getItems().TreeItem[7].getText()" 
        | equals "Too few steps (1) in keyword (TooFewKeywordSteps)" | verify-true
}

//check line, type, file name for one error
with [get-view Problems | get-tree] {
    get-item -path "Errors \\(6 items\\)/Duplicate keyword name 'ABC' \\(DuplicateKeywordNames\\)" 
        | get-property "values['Description']" | equals "Duplicate keyword name 'ABC' (DuplicateKeywordNames)" 
        | verify-true
    get-item -path "Errors \\(6 items\\)/Duplicate keyword name 'ABC' \\(DuplicateKeywordNames\\)" 
        | get-property "values['Resource']" | equals "test1.robot" | verify-true
    get-item -path "Errors \\(6 items\\)/Duplicate keyword name 'ABC' \\(DuplicateKeywordNames\\)" 
        | get-property "values['Path']" | equals "/project_a/a1/a2" | verify-true
    get-item -path "Errors \\(6 items\\)/Duplicate keyword name 'ABC' \\(DuplicateKeywordNames\\)" 
        | get-property "values['Location']" | equals "line 13" | verify-true
    get-item -path "Errors \\(6 items\\)/Duplicate keyword name 'ABC' \\(DuplicateKeywordNames\\)" 
        | get-property "values['Type']" | equals "RfLint Problem" | verify-true
}

//check line, type, file name for one warning
with [get-view Problems | get-tree] {
    get-item -path "Warnings \\(9 items\\)/Line is too long \\(exceeds 100 characters\\) \\(LineTooLong\\)" 
        | get-property "values['Description']" | equals "Line is too long (exceeds 100 characters) (LineTooLong)" 
        | verify-true
    get-item -path "Warnings \\(9 items\\)/Line is too long \\(exceeds 100 characters\\) \\(LineTooLong\\)" 
        | get-property "values['Resource']" | equals "test1.robot" | verify-true
    get-item -path "Warnings \\(9 items\\)/Line is too long \\(exceeds 100 characters\\) \\(LineTooLong\\)" 
        | get-property "values['Path']" | equals "/project_a/a1/a2" | verify-true
    get-item -path "Warnings \\(9 items\\)/Line is too long \\(exceeds 100 characters\\) \\(LineTooLong\\)" 
        | get-property "values['Location']" | equals "line 11" | verify-true
    get-item -path "Warnings \\(9 items\\)/Line is too long \\(exceeds 100 characters\\) \\(LineTooLong\\)" 
        | get-property "values['Type']" | equals "RfLint Problem" | verify-true
}

//clear problem from folder - check if one from other file still exists
get-view "Project Explorer" | get-tree | select "project_a/a1/a2" | get-menu 
    -path "Robot Framework/Clean RfLint problems" | click
    
check-warnings-for-one-test

//open preference 
get-preferences-menu | click
get-window Preferences | get-tree | select "Robot Framework/Errors\\/Warnings/RfLint validation"

//check how view looks like

with [get-window Preferences | get-tree 
    -after [get-link $link]] {
    get-property itemCount | equals 5 | verify-true
    
    // 4 built-in files with rules
    get-property "getItems().TreeItem[0].getText()" 
        | equals [format ".*rflint\\%srules\%skeywordRules.py \\(built-in\\)" $sys_sep $sys_sep]| verify-true
    get-property "getItems().TreeItem[1].getText()" 
        | equals [format ".*rflint\\%srules\\%sotherRules.py \\(built-in\\)" $sys_sep $sys_sep] | verify-true
    get-property "getItems().TreeItem[2].getText()" 
        | equals [format ".*rflint\\%srules\\%ssuiteRules.py \\(built-in\\)" $sys_sep $sys_sep] | verify-true
    get-property "getItems().TreeItem[3].getText()" 
        | equals [format  ".*rflint\\%srules\\%stestcaseRules.py \\(built-in\\)" $sys_sep $sys_sep]| verify-true

    //button    
    get-property "getItems().TreeItem[4].getText()" | equals "...add new rules file" | verify-true
}

with [get-window Preferences | get-tree 
    -after [get-link $link]] {
	
	//keywordRules
    get-item -path [format ".*rflint\\%srules\\%SkeywordRules.py \\(built-in\\)"  $sys_sep $sys_sep]
        | get-property "values['Rule']" 
        | equals [format ".*rflint\\%srules\\%skeywordRules.py \\(built-in\\)" $sys_sep $sys_sep] | verify-true
    get-item -path [format ".*rflint\\%srules\\%skeywordRules.py \\(built-in\\)"   $sys_sep $sys_sep]
        | get-property "values['Severity']" | equals 0 | verify-true
    get-item -path [format ".*rflint\\%srules\\%skeywordRules.py \\(built-in\\)"  $sys_sep $sys_sep]
        | get-property "getItems().length" | equals 2 | verify-true
        
    //RequireKeywordDocumentation      
    get-item -path [format ".*rflint\\%srules\\%skeywordRules.py \\(built-in\\)" $sys_sep $sys_sep]
        | get-property "getItems().TreeItem[0].getData().getDocumentation()" 
        | equals "Verify that a keyword has documentation" | verify-true
    get-item -path [format ".*rflint\\%srules\\%skeywordRules.py \\(built-in\\)" $sys_sep $sys_sep]
        | get-property "getItems().TreeItem[0].getData().getFilepath()" 
        | equals [format ".*rflint\\%srules\\%skeywordRules.py" $sys_sep $sys_sep] | verify-true
    get-item -path [format ".*rflint\\%srules\\%skeywordRules.py \\(built-in\\)" $sys_sep $sys_sep]
        | get-property "getItems().TreeItem[0].getData().getRuleName()" | equals RequireKeywordDocumentation 
        | verify-true
        
    //TooFewKeywordSteps    
    get-item -path [format ".*rflint\\%srules\\%skeywordRules.py \\(built-in\\)" $sys_sep $sys_sep]
        | get-property "getItems().TreeItem[1].getData().getDocumentation()" 
        | equals "Keywords should have at least a minimum number of steps\n\n"
        + "This rule is configurable. The default number of required steps is 2." | verify-true
    get-item -path [format ".*rflint\\%srules\\%skeywordRules.py \\(built-in\\)" $sys_sep $sys_sep]
        | get-property "getItems().TreeItem[1].getData().getFilepath()" 
        | equals [format ".*rflint\\%srules\\%skeywordRules.py"  $sys_sep $sys_sep] | verify-true
    get-item -path [format ".*rflint\\%srules\\%skeywordRules.py \\(built-in\\)" $sys_sep $sys_sep]
        | get-property "getItems().TreeItem[1].getData().getRuleName()" | equals TooFewKeywordSteps | verify-true
}

//check 3 rules in otherRules
with [get-window Preferences | get-tree 
    -after [get-link $link]] {
    get-item -path [format ".*rflint\\%srules\\%sotherRules.py \\(built-in\\)"  $sys_sep $sys_sep]
        | get-property childCount | equals 3 | verify-true
    get-item -path [format ".*rflint\\%srules\\%sotherRules.py \\(built-in\\)"  $sys_sep $sys_sep]
        | get-property "getItems().TreeItem[0].getText()" | equals FileTooLong | verify-true
    get-item -path [format ".*rflint\\%srules\\%sotherRules.py \\(built-in\\)"  $sys_sep $sys_sep]
        | get-property "getItems().TreeItem[1].getText()" | equals LineTooLong | verify-true
    get-item -path [format ".*rflint\\%srules\\%sotherRules.py \\(built-in\\)"  $sys_sep $sys_sep]
        | get-property "getItems().TreeItem[2].getText()" | equals TrailingBlankLines | verify-true
}


with [get-window Preferences | get-tree 
    -after [get-link $link]] {
    //DuplicateKeywordNames
    get-item 
        -path [ format ".*site-packages\\%srflint\\%srules\\%ssuiteRules.py \\(built-in\\)/DuplicateKeywordNames" $sys_sep $sys_sep $sys_sep]
        | get-property "values['Configuration']" | equals "" | verify-true
    get-item 
        -path [ format ".*site-packages\\%srflint\\%srules\\%ssuiteRules.py \\(built-in\\)/DuplicateKeywordNames" $sys_sep $sys_sep $sys_sep]
        | get-property "values['Rule']" | equals DuplicateKeywordNames | verify-true
    get-item 
        -path [ format ".*site-packages\\%srflint\\%srules\\%ssuiteRules.py \\(built-in\\)/DuplicateKeywordNames" $sys_sep $sys_sep $sys_sep]
        | get-property "values['Severity']" | equals Error | verify-true
        
    //   DuplicateTestNames  
    get-item -path [ format ".*site-packages\\%srflint\\%srules\\%ssuiteRules.py \\(built-in\\)/DuplicateTestNames" $sys_sep $sys_sep $sys_sep]
        | get-property "values['Configuration']" | equals "" | verify-true
    get-item -path [ format ".*site-packages\\%srflint\\%srules\\%ssuiteRules.py \\(built-in\\)/DuplicateTestNames" $sys_sep $sys_sep $sys_sep]
        | get-property "values['Rule']" | equals DuplicateTestNames | verify-true
    get-item -path [ format ".*site-packages\\%srflint\\%srules\\%ssuiteRules.py \\(built-in\\)/DuplicateTestNames" $sys_sep $sys_sep $sys_sep]
        | get-property "values['Severity']" | equals Error | verify-true
        
    // InvalidTable
    get-item -path [ format ".*site-packages\\%srflint\\%srules\\%ssuiteRules.py \\(built-in\\)/InvalidTable" $sys_sep $sys_sep $sys_sep]
        | get-property "values['Configuration']" | equals "" | verify-true
    get-item -path [ format ".*site-packages\\%srflint\\%srules\\%ssuiteRules.py \\(built-in\\)/InvalidTable" $sys_sep $sys_sep $sys_sep]
        | get-property "values['Rule']" | equals InvalidTable | verify-true
    get-item -path [ format ".*site-packages\\%srflint\\%srules\\%ssuiteRules.py \\(built-in\\)/InvalidTable" $sys_sep $sys_sep $sys_sep]
        | get-property "values['Severity']" | equals Warning | verify-true
        
    // PeriodInSuiteName    
    get-item -path [ format ".*site-packages\\%srflint\\%srules\\%ssuiteRules.py \\(built-in\\)/PeriodInSuiteName" $sys_sep $sys_sep $sys_sep]
        | get-property "values['Configuration']" | equals "" | verify-true
    get-item -path [ format ".*site-packages\\%srflint\\%srules\\%ssuiteRules.py \\(built-in\\)/PeriodInSuiteName" $sys_sep $sys_sep $sys_sep]
        | get-property "values['Rule']" | equals PeriodInSuiteName | verify-true
    get-item -path [ format ".*site-packages\\%srflint\\%srules\\%ssuiteRules.py \\(built-in\\)/PeriodInSuiteName" $sys_sep $sys_sep $sys_sep]
        | get-property "values['Severity']" | equals Warning | verify-true
    
    // RequireSuiteDocumentation    
    get-item 
        -path [ format ".*site-packages\\%srflint\\%srules\\%ssuiteRules.py \\(built-in\\)/RequireSuiteDocumentation" $sys_sep $sys_sep $sys_sep]
        | get-property "values['Configuration']" | equals "" | verify-true
    get-item 
        -path [ format ".*site-packages\\%srflint\\%srules\\%ssuiteRules.py \\(built-in\\)/RequireSuiteDocumentation" $sys_sep $sys_sep $sys_sep]
        | get-property "values['Rule']" | equals RequireSuiteDocumentation | verify-true
    get-item 
        -path [ format ".*site-packages\\%srflint\\%srules\\%ssuiteRules.py \\(built-in\\)/RequireSuiteDocumentation" $sys_sep $sys_sep $sys_sep]
        | get-property "values['Severity']" | equals Warning | verify-true
    
    //TooManyTestCases    
    get-item -path [ format ".*site-packages\\%srflint\\%srules\\%ssuiteRules.py \\(built-in\\)/TooManyTestCases" $sys_sep $sys_sep $sys_sep]
        | get-property "values['Configuration']" | equals "" | verify-true
    get-item -path [ format ".*site-packages\\%srflint\\%srules\\%ssuiteRules.py \\(built-in\\)/TooManyTestCases" $sys_sep $sys_sep $sys_sep]
        | get-property "values['Rule']" | equals TooManyTestCases | verify-true
    get-item -path [ format ".*site-packages\\%srflint\\%srules\\%ssuiteRules.py \\(built-in\\)/TooManyTestCases" $sys_sep $sys_sep $sys_sep]
        | get-property "values['Severity']" | equals Warning | verify-true
}

//check severity for testcaseRules
with [get-window Preferences] {
    with [get-tree 
        -after [get-link $link]] {
        get-item 
            -path [ format ".*site-packages\\%srflint\\%srules\\%stestcaseRules.py \\(built-in\\)/PeriodInTestName" $sys_sep $sys_sep $sys_sep]
            | get-property "values['Rule']" | equals PeriodInTestName | verify-true
        get-item 
            -path [ format ".*site-packages\\%srflint\\%srules\\%stestcaseRules.py \\(built-in\\)/PeriodInTestName" $sys_sep $sys_sep $sys_sep]
            | get-property "values['Severity']" | equals Warning | verify-true
        
        get-item 
            -path [ format ".*site-packages\\%srflint\\%srules\\%stestcaseRules.py \\(built-in\\)/RequireTestDocumentation" $sys_sep $sys_sep $sys_sep]
            | get-property "values['Rule']" | equals RequireTestDocumentation | verify-true
        get-item 
            -path [ format ".*site-packages\\%srflint\\%srules\\%stestcaseRules.py \\(built-in\\)/RequireTestDocumentation" $sys_sep $sys_sep $sys_sep]
            | get-property "values['Severity']" | equals Error | verify-true
        
        get-item 
            -path [ format ".*site-packages\\%srflint\\%srules\\%stestcaseRules.py \\(built-in\\)/TooFewTestSteps" $sys_sep $sys_sep $sys_sep]
            | get-property "values['Rule']" | equals TooFewTestSteps | verify-true
        get-item 
            -path [ format ".*site-packages\\%srflint\\%srules\\%stestcaseRules.py \\(built-in\\)/TooFewTestSteps" $sys_sep $sys_sep $sys_sep]
            | get-property "values['Severity']" | equals Warning | verify-true
        
        get-item 
            -path [ format ".*site-packages\\%srflint\\%srules\\%stestcaseRules.py \\(built-in\\)/TooManyTestSteps" $sys_sep $sys_sep $sys_sep]
            | get-property "values['Rule']" | equals TooManyTestSteps | verify-true
        get-item 
            -path [ format ".*site-packages\\%srflint\\%srules\\%stestcaseRules.py \\(built-in\\)/TooManyTestSteps" $sys_sep $sys_sep $sys_sep]
            | get-property "values['Severity']" | equals Warning | verify-true
    }
    
    //field for Additional arguments 
    with [get-control Any 
        -after [get-link $link] 
        -index 28] {
        get-property "getChildren().length" | equals 3 | verify-true
        get-property "getChildren().Control[0].getText()" | equals "Additional arguments for RfLint" | verify-true
        get-property "getChildren().Control[1].getText()" | equals "" | verify-true
        get-property "getChildren().Control[1].getEditable()" | equals true | verify-true
        get-property "getChildren().Control[2].getText()" | equals "Variables..." | verify-true
    }
    get-button "Restore Defaults" | get-property enablement | equals true | verify-true
    get-button Apply | get-property enablement | equals true | verify-true
}

//change value for LineTooLong to 80
with [get-window Preferences | get-tree 
    -after [get-link $link]] {
    get-item -path [format ".*site-packages\\%srflint\\%srules\\%sotherRules.py \\(built-in\\)"  $sys_sep $sys_sep $sys_sep]| expand
    get-cell 3 2 | click
    get-item -path [format ".*site-packages\\%srflint\\%srules\\%sotherRules.py \\(built-in\\)"  $sys_sep $sys_sep $sys_sep] | expand
    get-cell 3 2 | mouse down -count 2
    double-click
    select [format ".*site-packages\\%srflint\\%srules\\%sotherRules.py \\(built-in\\)/LineTooLong"  $sys_sep $sys_sep $sys_sep]
        | activate-cell-edit -column 2 -type MouseDoubleClickSelection
    get-cell 3 2 | mouse up -count 2
    get-editbox | set-text 80
    apply-cell-edit -deactivate
}

//check font - is bold
with [get-window Preferences | get-tree 
    -after [get-link $link]] {
    get-item -path [format ".*site-packages\\%srflint\\%srules\\%sotherRules.py \\(built-in\\)/LineTooLong"  $sys_sep $sys_sep $sys_sep]
        | get-property "values['Configuration']" | equals 80 | verify-true
    get-item -path [format ".*site-packages\\%srflint\\%srules\\%sotherRules.py \\(built-in\\)/LineTooLong"  $sys_sep $sys_sep $sys_sep]
        | get-property "values['Rule']" | equals LineTooLong | verify-true
    get-item -path [format ".*site-packages\\%srflint\\%srules\\%sotherRules.py \\(built-in\\)/LineTooLong"  $sys_sep $sys_sep $sys_sep]
        | get-property "values['Severity']" | equals Warning | verify-true
}
get-window Preferences | get-button "Apply and Close" | click

//run this new rule on project
get-view "Project Explorer" | get-tree | select "project_a" | get-menu -path "Robot Framework/Run RfLint analysis" 
    | click


wait-for-errors -amount 6 -times 6 -delay 1000
    
with [get-view Problems | get-tree] {
    get-item -path "Errors \\(6 items\\)" | get-property childCount | equals 6 | verify-true
    
    //here is new warning
    get-item -path "Warnings \\(9 items\\)" | get-property "getItems().TreeItem[0].getText()" 
        | equals "Line is too long (exceeds 80 characters) (LineTooLong)" | verify-true
        
    get-item -path "Warnings \\(9 items\\)" | get-property "getItems().TreeItem[1].getText()" 
        | equals "No suite documentation (RequireSuiteDocumentation)" | verify-true
        
    get-item -path "Warnings \\(9 items\\)" | get-property "getItems().TreeItem[2].getText()" 
        | equals "No suite documentation (RequireSuiteDocumentation)" | verify-true

    	    
    get-item -path "Warnings \\(9 items\\)" | get-property "getItems().TreeItem[3].getText()" 
        | equals "The keyword 'abc' is masking the keyword 'a b c' defined in res1. Use 'res1.a b c' in this suite file if the latter is desired" 
        | verify-true
    get-item -path "Warnings \\(9 items\\)" | get-property "getItems().TreeItem[4].getText()" 
        | equals "The keyword 'ABC' is masking the keyword 'a b c' defined in res1. Use 'res1.a b c' in this suite file if the latter is desired" 
        | verify-true
    get-item -path "Warnings \\(9 items\\)" | get-property "getItems().TreeItem[5].getText()" 
        | equals "Too few steps (0) in test case (TooFewTestSteps)" | verify-true
        
    get-item -path "Warnings \\(9 items\\)" | get-property "getItems().TreeItem[6].getText()" 
        | equals "Too few steps (1) in keyword (TooFewKeywordSteps)" | verify-true
        
    get-item -path "Warnings \\(9 items\\)" | get-property "getItems().TreeItem[7].getText()" 
        | equals "Too few steps (1) in keyword (TooFewKeywordSteps)" | verify-true
        
    get-item -path "Warnings \\(9 items\\)" | get-property "getItems().TreeItem[8].getText()" 
        | equals "Too many trailing blank lines (TrailingBlankLines)" | verify-true
}

//remove all errors from project
get-view "Project Explorer" | get-tree | select "project_a" | get-menu -path "Robot Framework/Clean RfLint problems" 
    | click
with [get-view Problems | get-tree] {
    get-item -path "Errors \\(3 items\\)" | get-property childCount | equals 3 | verify-true
    get-item -path "Warnings \\(3 items\\)" | get-property childCount | equals 3 | verify-true
}

//add cutom rule form python file
get-preferences-menu | click
set-dialog-result File "platform:/resource/project_a/customRules.py"
get-window Preferences |  get-tree  -after [get-link $link]	| get-item "...add new rules file" | double-click
get-window Preferences | get-button "Apply and Close" | click

//run rule on one file
get-view "Project Explorer" | get-tree | select "project_a/test3.robot" | get-menu 
    -path "Robot Framework/Run RfLint analysis" | click
    
with [get-view Problems | get-tree] {
    get-item -path "Warnings \\(4 items\\)" | get-property "getItems().TreeItem[0].getText()" 
        | equals "Line 5 should be empty (CustomRule)" | verify-true
        
    get-item -path "Warnings \\(4 items\\)" | get-property "getItems().TreeItem[1].getText()" 
        | equals "The keyword 'abc' is masking the keyword 'a b c' defined in res1. Use 'res1.a b c' in this suite file if the latter is desired" 
        | verify-true
    get-item -path "Warnings \\(4 items\\)" | get-property "getItems().TreeItem[2].getText()" 
        | equals "The keyword 'ABC' is masking the keyword 'a b c' defined in res1. Use 'res1.a b c' in this suite file if the latter is desired" 
        | verify-true
    get-item -path "Warnings \\(4 items\\)" | get-property "getItems().TreeItem[3].getText()" 
        | equals "Too many trailing blank lines (TrailingBlankLines)" | verify-true
}

//change new rule to error 
get-preferences-menu | click
with [get-window Preferences] {
    with [get-tree 
        -after [get-link $link]] {
        get-item -path [format ".*rflint\\%srules\\%stestcaseRules.py \\(built-in\\)" $sys_sep $sys_sep]| expand
        get-cell 4 1 | click
        get-item -path [format ".*rflint\\%srules\\%stestcaseRules.py \\(built-in\\)" $sys_sep $sys_sep] | expand
        get-cell 4 1 | click
        get-item -path [format ".*rflint\\%srules\\%stestcaseRules.py \\(built-in\\)" $sys_sep $sys_sep]| expand
        get-cell 4 1 | mouse down -count 2
        double-click

        //change PeriodInTestName to error
        select [format ".*rflint\\%srules\\%stestcaseRules.py \\(built-in\\)/PeriodInTestName"  $sys_sep $sys_sep]
            | activate-cell-edit -column 1 -type MouseDoubleClickSelection
        get-cell 4 1 | mouse up -count 2
        get-combo | select Error
        apply-cell-edit -deactivate
        get-item -path [format ".*project_a\\%scustomRules.py" $sys_sep $sys_sep]| expand
        get-cell 10 2 | click
        get-item -path [format ".*project_a\\%scustomRules.py" $sys_sep $sys_sep]| expand
        get-cell 10 2 | mouse down -count 2
        double-click
        
        //change CustomRule value to 3
        select [format ".*project_a\\%scustomRules.py/CustomRule" $sys_sep $sys_sep]| activate-cell-edit -column 2 
            -type MouseDoubleClickSelection
        get-cell 10 2 | mouse up -count 2
        get-editbox | set-text 3
        apply-cell-edit -deactivate
    }
}

//click on rule to see doc: requireKeywordDocumentation
get-window Preferences | maximize
with [get-window Preferences | get-tree 
    -after [get-link $link]] {
    select [format ".*rflint\\%srules\\%skeywordRules.py \\(built-in\\)" $sys_sep $sys_sep]| get-item 
        -path [format ".*rflint\\%srules\\%skeywordRules.py \\(built-in\\)" $sys_sep $sys_sep]| expand
    get-cell 1 0 | click
}


get-window Preferences | get-canvas | get-property text 
    | equals ".*site-packages[/\\\\]rflint[/\\\\]rules[/\\\\]keywordRules.py\r\n"
    + "Verify that a keyword has documentation\r\n" | verify-true
   
//check doc with link - TooManyTestSteps
with [get-window Preferences | get-tree -after [get-link $link]] {
    get-item -path [format ".*rflint\\%srules\\%stestcaseRules.py \\(built-in\\)"  $sys_sep $sys_sep]| expand
    get-cell 10 0 | click
}
get-window Preferences | get-canvas | get-property text 
    | equals ".*[/\\\\]site-packages[/\\\\]rflint[/\\\\]rules[/\\\\]testcaseRules.py\r\n"
    + "Workflow tests should have no more than ten steps.\r\n"
    + "https://code.google.com/p/robotframework/wiki/HowToWriteGoodTestCases#Workflow_tests\r\n" | verify-true
    
get-window Preferences | get-button "Apply and Close" | click

//run those rules on second project
get-view "Project Explorer" | get-tree | select "project_b"
exec-with-options {
    get-view "Project Explorer" | get-tree | get-menu -path "Robot Framework/Run RfLint analysis" | click
} -allowStatusDialog    

//checek new errors
with [get-view Problems | get-tree] {
    get-item -path "Errors \\(4 items\\)" | get-property "getItems().TreeItem[0].getText()" 
        | equals "'.' in testcase name 'dot.here' (PeriodInTestName)" | verify-true
    get-item -path "Errors \\(4 items\\)" | get-property "getItems().TreeItem[1].getText()" 
        | equals "Duplicated keyword definition 'abc'" | verify-true
    get-item -path "Errors \\(4 items\\)" | get-property "getItems().TreeItem[2].getText()" 
        | equals "Duplicated keyword definition 'ABC'" | verify-true
    get-item -path "Errors \\(4 items\\)" | get-property "getItems().TreeItem[3].getText()" 
        | equals "Test case 'test 1' contains no keywords to execute" | verify-true
        
    //warnings    
    get-item -path "Warnings \\(5 items\\)" | get-property "getItems().TreeItem[0].getText()" 
        | equals "Line 3 should be empty (CustomRule)" | verify-true
    get-item -path "Warnings \\(5 items\\)" | get-property "getItems().TreeItem[1].getText()" 
        | equals "Line 5 should be empty (CustomRule)" | verify-true

    get-item -path "Warnings \\(5 items\\)" | get-property "getItems().TreeItem[2].getText()" 
        | equals "The keyword 'abc' is masking the keyword 'a b c' defined in res1. Use 'res1.a b c' in this suite file if the latter is desired" 
        | verify-true
    get-item -path "Warnings \\(5 items\\)" | get-property "getItems().TreeItem[3].getText()" 
        | equals "The keyword 'ABC' is masking the keyword 'a b c' defined in res1. Use 'res1.a b c' in this suite file if the latter is desired" 
        | verify-true
    get-item -path "Warnings \\(5 items\\)" | get-property "getItems().TreeItem[4].getText()" 
        | equals "Too many trailing blank lines (TrailingBlankLines)" | verify-true
}

//click on error to go to editor
get-view Problems | get-tree | select "Errors \\(4 items\\)/'.' in testcase name 'dot.here' \\(PeriodInTestName\\)" 
    | double-click
    
//check selection    
get-editor "test4.robot" | get-text-viewer | get-property "getSelectionText()" | equals "dot.here" | verify-true

//check new warning
get-view Problems | get-tree | select "Warnings (6 items)/Line 3 should be empty (CustomRule)" 
    | select "Warnings \\(6 items\\)/Line 3 should be empty \\(CustomRule\\)" | double-click
get-editor "test4.robot" | get-text-viewer | get-property "getSelectionText()" | equals "*** Test Cases ***" | verify-true


------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac--
