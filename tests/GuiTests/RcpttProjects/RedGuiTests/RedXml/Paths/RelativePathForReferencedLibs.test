--- RCPTT testcase ---
Format-Version: 1.0
Contexts: _eXb6MPp7EeW7_PzjO98BIw,_6kElkDBsEemdFPzzB7f3Tg,_SeyjkFVfEem357czkDciHA
Element-Name: RelativePathForReferencedLibs
Element-Type: testcase
Element-Version: 3.0
External-Reference: 
Id: _8mYawAiBEearkLC-7wHL-g
Runtime-Version: 2.5.0.202001211718
Save-Time: 4/20/20 5:37 PM
Testcase-Type: ecl

------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac
Content-Type: text/ecl
Entry-Name: .content

proc "comapre-paths" [val rp]{
	set-dialog-result File [get-arg-file-path]
	get-menu "File/Open File..." | click    
	if [get-by-os -linux "Linux" -win "Windows"| equals "Windows"]{  
		get-editor "args_.*.arg" | get-text-viewer | get-property text | matches [format "# arguments automatically generated\n"
	   	    + "--pythonpath %s:%s:%s:%s\n"
	    	+ "--suite      RobotProject.Lib With Variable" $rp $rp $rp $rp ] | verify-true
    }-else{
    	get-editor "args_.*.arg" | get-text-viewer | get-property text | matches [format "# arguments automatically generated\n"
	    	+ "--pythonpath %s:%s\n"
	    	+ "--suite      RobotProject.Lib With Variable" $rp $rp] | verify-true
    }
	get-editor "args_.*.arg" | close 
}

proc "check-arg-file-for-relative-path" [val project_name ""]{
	//set paths to regexp - if path is relative to WS then project_name is empty
	if [get-by-os -linux "Linux" -win "Windows"| equals "Windows"]{   
		 replace -input $RED_workspace_path -old "\\" -new "\\\\" | let [val new_ws_path -input]{    
			comapre-paths [format "(%s%s\\\\libs|D:\\\\folder\\\\folder2|\\\\linux_path\\\\tests|\\\\win_path\\\\addons)" $new_ws_path $project_name]
	    }
	}-else{
		comapre-paths [format "(%s%s/libs|/linux_path/tests)" $RED_workspace_path $project_name]
	}
}


select-to-not-run-autodiscover-after-save

//open red.xml and add new path to PYTHONPAT
get-view "Project Explorer" | get-tree | select "RobotProject/red.xml" | double-click

wait-for-loading-red-xml "RobotProject/red.xml"

with [get-editor "RobotProject/red.xml"] {
    get-tab-folder | get-tab-item "Libraries" | click
    get-section Paths | get-table | select [get-item "...add new search path" ]
    get-section Paths | get-table | get-item "...add new search path" | double-click
}
with [get-window "Add new search path"] {
    with [get-editbox 
        -after [get-label "Provide search paths to be added. Each path should be specified in separate line."]] {
        set-text "libs\n"
            + "D:\\folder\\folder2\n"
            + "/linux_path/tests\n"
            + "\\win_path/addons"
    }
    get-button OK | click
}
wait 200
get-editor "RobotProject/red.xml" | get-section Paths | get-table | key-type "M1+s"
wait 200
get-editor "RobotProject/red.xml"|  maximize

if [get-by-os -linux "Linux" -win "Windows"| equals "Windows"]{   
	
	//check color of items in table
	with [get-editor "RobotProject/red.xml" | get-section Paths | get-table] {
	    get-item libs | get-property "styles[0].foregroundColor" | equals "#FFA500" | verify-true
	    get-item "D:\\folder\\folder2" | get-property "styles[0].foregroundColor" | equals "#FFA500" | verify-true
	    get-item "\\/linux_path\\/tests" | get-property "styles[0].foregroundColor" | equals "#FFA500" | verify-true
	    get-item "\\win_path\\/addons" | get-property "styles[0].foregroundColor" | equals "#FFA500" | verify-true
	}
	get-editor "RobotProject/red.xml"| restore
	
	//check warnings
	with [get-view Problems | get-tree] {  	
	    get-item "Warnings \\(4 items\\)/The path '\\linux_path\\tests' points to non-existing location" 
	        | get-property caption | equals "The path '\\linux_path\\tests' points to non-existing location" | verify-true
	    get-item "Warnings \\(4 items\\)/The path '\\win_path\\addons' points to non-existing location" 
	        | get-property caption | equals "The path '\\win_path\\addons' points to non-existing location" | verify-true
	    get-item "Warnings \\(4 items\\)/The path '.*libs' points to non-existing location" 
	        | get-property caption | equals [format "The path '%s\\libs' points to non-existing location" $RED_workspace_path]
	        | verify-true
	    get-item "Warnings \\(4 items\\)/The path 'D:\\folder\\folder2' points to non-existing location" 
	        | get-property caption | equals "The path 'D:\\folder\\folder2' points to non-existing location" | verify-true
	 }

}-else{
	//check color of items in table
	with [get-editor "RobotProject/red.xml" | get-section Paths | get-table] {
	    get-item libs | get-property "styles[0].foregroundColor" | equals "#FFA500" | verify-true
	    get-item "D:\\folder\\folder2" | get-property "styles[0].foregroundColor" | equals "#FF0000" | verify-true
	    get-item "\\/linux_path\\/tests" | get-property "styles[0].foregroundColor" | equals "#FFA500" | verify-true
	    get-item "\\win_path\\/addons" | get-property "styles[0].foregroundColor" | equals "#FF0000" | verify-true
	}
	get-editor "RobotProject/red.xml"| restore
	
	//check warnings and errors
	with [get-view Problems | get-tree] {
		get-item "Warnings \\(2 items\\)/The path '\\/linux_path\\/tests' points to non-existing location" 
	        | get-property caption | equals "The path '/linux_path/tests' points to non-existing location" | verify-true
	    get-item "Warnings \\(2 items\\)/The path '.*libs' points to non-existing location" 
	        | get-property caption | equals [format "The path '%s/libs' points to non-existing location"  $RED_workspace_path]
	        | verify-true
	}	
	with [get-view Problems | get-tree] {
		get-item 
	        -path "Errors \\(.* items\\)/The path '.*addons' is invalid" 
	        | get-property caption | equals [format "The path '%s/\\win_path/addons' is invalid" $RED_workspace_path ]
	        | verify-true
		get-item 
	        -path "Errors \\(.* items\\)/The path '.*folder2' is invalid" 
	        | get-property caption | equals "The path '.*D:\\\\folder\\\\folder2' is invalid" 
	        | verify-true
	}
}

//add lib to test
get-view "Project Explorer" | get-tree | select "RobotProject/lib_with_variable.robot" | double-click
get-editor "lib_with_variable.robot" | get-text-viewer |set-text "*** Settings ***\n"
    + "Library    add\n"
    + "*** Test Cases ***\n"
    + "test\n"
    + "    log  67"
    
with [get-editor "lib_with_variable.robot" | get-text-viewer] {
    key-type "M1+s"
}    
//run test    
get-view "Project Explorer" | get-tree | select "RobotProject/lib_with_variable.robot" | get-menu "Run As/1 Robot Test" 
    | click
try -times 5 -delay 1000 -command{
	get-view Console | get-button Terminate | get-property "isEnabled()" | equals false | verify-true
}

//check console

if [$python_version | eq 3]{
	get-view Console | get-text-viewer | get-property text 
	    | contains "lib_with_variable.robot' on line 2: Importing test library 'add' failed: ModuleNotFoundError: No module named 'add'"
	    | verify-true
}-else{
	get-view Console | get-text-viewer | get-property text 
	    | contains "lib_with_variable.robot': Importing test library 'add' failed: ImportError: No module named add\n"
	    | verify-true
}    
check-arg-file-for-relative-path

//change path to Project
get-tab-folder -index 3 | get-tab-item "RobotProject/red.xml" | click
wait 1000

with [get-editor "RobotProject/red.xml" | get-section Paths] {
    get-combo -after [get-label "Relative paths defined below are relative to:"] | select PROJECT
    get-table | select "\\win_path\\/addons" | key-type "M1+s"
}

get-view Problems | click

if [get-by-os -linux "Linux" -win "Windows"| equals "Windows"]{   
	with [get-view Problems | get-tree] {
	    get-item "Warnings \\(3 items\\)" | get-property childCount | equals 3 | verify-true
	    get-item "Warnings \\(3 items\\)/The path '\\linux_path\\tests' points to non-existing location" 
	        | get-property caption | equals "The path '\\linux_path\\tests' points to non-existing location" | verify-true
	    get-item "Warnings \\(3 items\\)/The path '\\win_path\\addons' points to non-existing location" 
	        | get-property caption | equals "The path '\\win_path\\addons' points to non-existing location" | verify-true
	    get-item "Warnings \\(3 items\\)/The path 'D:\\folder\\folder2' points to non-existing location" 
	        | get-property caption | equals "The path 'D:\\folder\\folder2' points to non-existing location" | verify-true
	}
}-else{
	with [get-view Problems | get-tree] {
	    get-item 
	        -path "Errors \\(.* items\\)/The path '.*addons' is invalid" 
	        | get-property caption 
	        | equals [format "The path '%s/RobotProject/\\win_path/addons' is invalid" $RED_workspace_path] | verify-true
	    get-item 
	        -path "Errors \\(.* items\\)/The path '.*folder2' is invalid" 
	        | get-property caption 
	        | equals [format "The path '%s/RobotProject/D:\\folder\\folder2' is invalid" $RED_workspace_path]
	        | verify-true
	}
}

get-view "Project Explorer" | get-tree | select "RobotProject/lib_with_variable.robot" | get-menu "Run As/1 Robot Test" 
    | click
    
wait-for-message-log    
get-view "Message Log" | get-editbox | get-property text | equals "Starting test: RobotProject.Lib With Variable.test\n"
    + "\d{8} (\d\d:){2}\d\d.\d{1,3} : INFO : 67\n"
    + "Ending test: RobotProject.Lib With Variable.test" | verify-true


check-arg-file-for-relative-path -project_name  [os-specific -windowsValue "\\\\RobotProject" -linuxValue "/RobotProject"]


------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac--
